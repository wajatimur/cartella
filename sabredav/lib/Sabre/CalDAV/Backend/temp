
    /**
     * Creates a new calendar for a principal.
     *
     * If the creation was a success, an id must be returned that can be used to reference
     * this calendar in other methods, such as updateCalendar
     *
     * @param string $principalUri
     * @param string $calendarUri
     * @param array $properties
     * @return mixed
     */
    public function createCalendar($principalUri,$calendarUri, array $properties) {

        global $DOCMGR;

        $fieldNames = array(
            'principaluri',
            'uri',
        );
        $values = array(
            ':principaluri' => $principalUri,
            ':uri'          => $calendarUri
        );

        foreach($this->propertyMap as $xmlName=>$dbName) {
            if (isset($properties[$xmlName])) {
                $values[':' . $dbName] = $properties[$xmlName];
                $fieldNames[] = $dbName;
            }
        }


        $num = count($fieldNames);
        $keys = array_keys($values); 

        $opt = array();
                                
        for ($i=0;$i<$num;$i++) $opt[$fieldNames[$i]] = $keys[$i];
        
        $opt = $this->reformatData($data);
        $opt["command"] = "calendar_ical_savecalendar";
        $opt["caldav"] = "t";
        $arr = $DOCMGR->call($opt);
        
        return $arr["calendar_id"];
        
    }


    /**
     * Updates a calendar's properties
     *
     *
     * The mutations array has 3 elements for each item. The first indicates if the property
     * is to be removed or updated (Sabre_DAV_Server::PROP_REMOVE and Sabre_DAV_Server::PROP_SET)
     * the second is the propertyName in Clark notation, the third is the actual value (ommitted
     * if the property is to be deleted).
     *
     * The result of this method should be another array. Each element has 2 subelements with the 
     * propertyname and statuscode for the change
     *
     * For example:
     *   array(array('{DAV:}prop1',200), array('{DAV:}prop2',200), array('{DAV:}prop3',403))
     *
     * The default implementation does not allow any properties to be updated, and thus
     * will return 403 for each one.
     *
     * @param string $calendarId
     * @param array $mutations
     * @return array 
     */
    public function updateCalendar($calendarId, array $mutations) {

        global $DOCMGR;

        $values = array();

        $result = array();

        foreach($mutations as $mutation) {

            // If the fieldname is not in the propertymap, we deny the update
            if (!isset($this->propertyMap[$mutation[1]])) {
                $result[] = array($mutation[1],403);
                continue;
            }
            $value = $mutation[0]===Sabre_DAV_Server::PROP_REMOVE?null:$mutation[2];
            $fieldName = $this->propertyMap[$mutation[1]];

            $values[$fieldName] = $value;

            // We're assuming early that the property update will succeed
            // if it doesn't, we'll get a SQL error anyway.
            $result[] = array($mutation[1],200);


        }
       
        // If the values array is empty, it means no supported
        // field are updated. The result should only contain 403 statuses
        if (count($values)===0) return $result;
    
        $opt = null;
            
        foreach($values as $fieldName=>$value) {
            $opt[$fieldName] = $value;
        }

        $opt = $this->reformatData($opt);
        $opt["command"] = "calendar_ical_savecalendar";
        $opt["calendar_id"] = $calendarId;
        $opt["caldav"] = "t";
        $arr = $DOCMGR->call($opt);

        return $result;

    }

    //reformats his fields to our database
    private function reformatCalData($data)
    {
    
      if ($data["principaluri"]) 
      {
        $data["principal_uri"] = $data["principaluri"];
        unset($data["principaluri"]);
      }        

      if ($data["displayname"]) 
      {
        $data["display_name"] = $data["displayname"];
        unset($data["displayname"]);
      }        

      if ($data["calendarcolor"]) 
      {
        $data["color"] = $data["calendarcolor"];
        unset($data["calendarcolor"]);
      }        

      return $data;
    
    }

